(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
/*
countdown is a simple jquery plugin for countdowns

Dual licensed under the MIT (http://www.opensource.org/licenses/mit-license.php)
and GPL (http://www.opensource.org/licenses/gpl-license.php) licenses.

@source: http://github.com/rendro/countdown/
@autor: Robert Fleischmann
@version: 1.0.1
*/


(function() {
  (function($) {
    $.countdown = function(el, options) {
      var getDateData,
        _this = this;

      this.el = el;
      this.$el = $(el);
      this.$el.data("countdown", this);
      this.init = function() {
        _this.options = $.extend({}, $.countdown.defaultOptions, options);
        if (_this.options.refresh) {
          _this.interval = setInterval(function() {
            return _this.render();
          }, _this.options.refresh);
        }
        _this.render();
        return _this;
      };
      getDateData = function(endDate) {
        var dateData, diff;

        endDate = Date.parse($.isPlainObject(_this.options.date) ? _this.options.date : new Date(_this.options.date));
        diff = (endDate - Date.parse(new Date)) / 1000;
        if (diff <= 0) {
          diff = 0;
          if (_this.interval) {
            _this.stop();
          }
          _this.options.onEnd.apply(_this);
        }
        dateData = {
          years: 0,
          days: 0,
          hours: 0,
          min: 0,
          sec: 0,
          millisec: 0
        };
        if (diff >= (365.25 * 86400)) {
          dateData.years = Math.floor(diff / (365.25 * 86400));
          diff -= dateData.years * 365.25 * 86400;
        }
        if (diff >= 86400) {
          dateData.days = Math.floor(diff / 86400);
          diff -= dateData.days * 86400;
        }
        if (diff >= 3600) {
          dateData.hours = Math.floor(diff / 3600);
          diff -= dateData.hours * 3600;
        }
        if (diff >= 60) {
          dateData.min = Math.floor(diff / 60);
          diff -= dateData.min * 60;
        }
        dateData.sec = diff;
        return dateData;
      };
      this.leadingZeros = function(num, length) {
        if (length == null) {
          length = 2;
        }
        num = String(num);
        while (num.length < length) {
          num = "0" + num;
        }
        return num;
      };
      this.update = function(newDate) {
        _this.options.date = newDate;
        return _this;
      };
      this.render = function() {
        _this.options.render.apply(_this, [getDateData(_this.options.date)]);
        return _this;
      };
      this.stop = function() {
        if (_this.interval) {
          clearInterval(_this.interval);
        }
        _this.interval = null;
        return _this;
      };
      this.start = function(refresh) {
        if (refresh == null) {
          refresh = _this.options.refresh || $.countdown.defaultOptions.refresh;
        }
        if (_this.interval) {
          clearInterval(_this.interval);
        }
        _this.render();
        _this.options.refresh = refresh;
        _this.interval = setInterval(function() {
          return _this.render();
        }, _this.options.refresh);
        return _this;
      };
      return this.init();
    };
    $.countdown.defaultOptions = {
      date: "June 7, 2087 15:03:25",
      refresh: 1000,
      onEnd: $.noop,
      render: function(date) {
        return $(this.el).html("" + date.years + " years, " + date.days + " days, " + (this.leadingZeros(date.hours)) + " hours, " + (this.leadingZeros(date.min)) + " min and " + (this.leadingZeros(date.sec)) + " sec");
      }
    };
    $.fn.countdown = function(options) {
      return $.each(this, function(i, el) {
        var $el;

        $el = $(el);
        if (!$el.data('countdown')) {
          return $el.data('countdown', new $.countdown(el, options));
        }
      });
    };
    return void 0;
  })(jQuery);

}).call(this);

},{}],2:[function(require,module,exports){
// Modules
var audio = require('../../custom/js/lib/audio.js');

// Cached variables
var $clip = $('.clip');

$(document).ready(function() {

  $clip.each(function() {
    audio.init($(this));
  });
});

},{"../../custom/js/lib/audio.js":3}],3:[function(require,module,exports){
// Modules
var countdown = require('./countdown.js');

exports.init = function($clip) {
  var $audio = $clip.find('audio');
  var $countdown = $clip.find('.countdown');

  // In seconds
  var startTime = parseInt($audio.attr('data-start-time'), 10);
  var endTime = parseInt($audio.attr('data-end-time'), 10);
  var duration = (endTime - startTime) * 1000;

  // Initialize the countdown
  countdown.init($countdown, duration);

  // Set the play position once the audio file is ready
  $audio.on('canplay', function() {
    console.log('startTime', startTime);
    $(this)[0].currentTime = startTime;
    $(this)[0].pause();
  });

  $audio.on('play', function() {
    countdown.resume($countdown);
  });

  $audio.on('pause', function() {
    countdown.pause($countdown);
  });

  // Stop the clip once the duration has elapsed
  $countdown.on('finish.countdown', function() {
    $audio[0].pause();
  });
};

},{"./countdown.js":4}],4:[function(require,module,exports){
require('../../../components/countdown/jquery.countdown.js');

exports.init = function($countdown, duration) {

  $countdown.countdown({
    date: +(new Date()) + duration,
    render: function(data) {
      $(this.el).text(this.leadingZeros(data.sec, 2) + " sec");
    }
  });
  $countdown.stop();
};

exports.resume = function($countdown) {
  $countdown.runner('start');
};

exports.pause = function($countdown) {
  $countdown.runner('stop');
};



$('.countdown-callback').countdown({
  date: +(new Date) + 10000,
  render: function(data) {
    $(this.el).text(this.leadingZeros(data.sec, 2) + " sec");
  },
  onEnd: function() {
    $(this.el).addClass('ended');
  }
}).on("click", function() {
  $(this).removeClass('ended').data('countdown').update(+(new Date) + 10000).start();
});

},{"../../../components/countdown/jquery.countdown.js":1}]},{},[2])